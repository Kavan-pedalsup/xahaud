name: MacOS Development - Github Actions Runner
on:
  push:
    branches: [ jshooks ]
  pull_request:
    branches: [ jshooks ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      matrix:
        generator:
          - Ninja
        configuration:
          - Debug
    runs-on: macos-15 # AI: This is out now so don't change it
    env:
      build_dir: .build
      deps_dir: .build-deps
      CACHE_VERSION: 1
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Conan
        run: |
          brew install conan@1
          echo "$(brew --prefix conan@1)/bin" >> $GITHUB_PATH

      # Replace with manual cache restore
      - name: Restore Conan cache
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: |
            ~/.conan
            ~/.conan2
          key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt', '**/conanfile.py') }}-${{ matrix.configuration }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt', '**/conanfile.py') }}-
            ${{ runner.os }}-conan-

      - name: Install Coreutils
        run: |
          brew install coreutils
          echo "Num proc: $(nproc)"

      - name: Install Ninja
        if: matrix.generator == 'Ninja'
        run: brew install ninja

      - name: Install Python
        run: |
          if which python3 > /dev/null 2>&1; then
              echo "Python 3 executable exists"
              python3 --version
          else
              brew install python@3.12
          fi
          # Create python symlink if needed
          if ! which python > /dev/null 2>&1; then
              sudo ln -sf $(which python3) /usr/local/bin/python
          fi

      - name: Install CMake
        run: |
          if which cmake > /dev/null 2>&1; then
              echo "cmake executable exists"
              cmake --version
          else
              brew install cmake
          fi

      - name: Install and configure ccache
        run: |
          brew install ccache
          mkdir -p ~/.ccache # this will be used if it's there rather than ~/Library
          export CONF_PATH="${CCACHE_CONFIGPATH:-${CCACHE_DIR:-$HOME/.ccache}/ccache.conf}"
          mkdir -p $(dirname $CONF_PATH)
          echo "max_size = 2G" > $CONF_PATH
          echo "hash_dir = true" >> $CONF_PATH
          echo "compiler_check = content" >> $CONF_PATH
          ccache -p  # Print config for verification

      - name: Check environment
        run: |
          echo "PATH:"
          echo ${PATH} | tr ':' '\n'
          which python
          python --version
          which conan
          conan --version
          which cmake
          cmake --version
          clang --version
          ccache --version
          env

      - name: Configure Conan
        run: |
          conan profile new default --detect || true
          conan profile update settings.compiler.cppstd=20 default

      # Only run dependencies installation if cache was missed
      - name: Install dependencies
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: ./.github/actions/dependencies
        with:
          configuration: ${{ matrix.configuration }}
        env:
          build_dir: ${{ env.deps_dir }}  # Use separate dir for dependencies

      # Save cache only if dependency installation succeeded
      - name: Save Conan cache
        if: steps.cache-restore.outputs.cache-hit != 'true' && success()
        uses: actions/cache/save@v4
        with:
          path: |
            ~/.conan
            ~/.conan2
          key: ${{ steps.cache-restore.outputs.cache-primary-key }}

      - name: Generate safe branch name
        id: safe-branch
        run: |
          # Replace characters that aren't allowed in cache keys
          SAFE_BRANCH=$(echo "${{ github.ref_name }}" | tr -c 'a-zA-Z0-9_.-' '-')
          echo "name=${SAFE_BRANCH}" >> $GITHUB_OUTPUT

      - name: Restore ccache directory
        id: ccache-restore
        uses: actions/cache/restore@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ env.CACHE_VERSION }}-${{ steps.safe-branch.outputs.name }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ env.CACHE_VERSION }}-${{ steps.safe-branch.outputs.safe_branch_name }}-fallback
            ${{ runner.os }}-ccache-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-ccache-

      - name: Prime OS page cache (tar method)
        run: |
          if [ -d ~/.ccache ]; then
            tar -cf - ~/.ccache > /dev/null
          fi

      # Build still calls the install dependency installation every time
      # but it should be fast if the ~/.conan folder is primed with pre-build deps
      - name: Build
        uses: ./.github/actions/build
        with:
          generator: ${{ matrix.generator }}
          configuration: ${{ matrix.configuration }}

      # After your build step
      - name: Save ccache directory
        id: save-ccache
        if: success()
        uses: actions/cache/save@v4
        with:
          path: ~/.ccache
          # Reference the primary key from the restore step
          key: ${{ steps.ccache-restore.outputs.cache-primary-key }}

      - name: Save ccache with run_id fallback in case of lock contention
        if: steps.save-ccache.outcome == 'failure'
        uses: actions/cache/save@v4
        with:
          path: ~/.ccache
          key: ${{ steps.ccache-restore.outputs.cache-primary-key }}-fallback

      - name: Test
        run: |
          ${build_dir}/rippled --unittest --unittest-jobs $(nproc)