name: Nix Development - GA Runner
on:
  push:
    branches: [jshooks]
  pull_request:
    branches: [jshooks]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checkpatterns:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check for suspicious patterns
        run: |
          if [ -f "suspicious_patterns.sh" ]; then
            bash suspicious_patterns.sh
          else
            echo "Warning: suspicious_patterns.sh not found, skipping check"
            # Still exit with success since this is just for status check compatibility
            exit 0
          fi

  build:
    runs-on: ubuntu-latest
    needs: checkpatterns
    outputs:
      artifact_name: ${{ steps.set-artifact-name.outputs.artifact_name }}
    strategy:
      fail-fast: false
      matrix:
        compiler: [gcc] # [gcc, clang]
        configuration: [Debug]
        include:
          - compiler: gcc
            cc: gcc-11
            cxx: g++-11
    #          - compiler: clang
    #            cc: clang-14
    #            cxx: clang++-14
    env:
      build_dir: .build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build ${{ matrix.cc }} ${{ matrix.cxx }}
          pip install --upgrade "conan<2"

      - name: Setup Conan cache
        id: conan-cache
        uses: actions/cache@v3
        with:
          path: ~/.conan
          key: ${{ runner.os }}-conan-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.txt', '**/conanfile.py') }}-${{ matrix.configuration }}
          restore-keys: |
            ${{ runner.os }}-conan-${{ matrix.compiler }}-${{ hashFiles('**/conanfile.txt', '**/conanfile.py') }}-
            ${{ runner.os }}-conan-${{ matrix.compiler }}-

      - name: Configure Conan
        run: |
          conan profile new default --detect || true
          conan profile update settings.compiler.cppstd=20 default
          conan profile update settings.compiler=${{ matrix.compiler }} default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update env.CC=/usr/bin/${{ matrix.cc }} default
          conan profile update env.CXX=/usr/bin/${{ matrix.cxx }} default
          conan profile update conf.tools.build:compiler_executables='{"c": "/usr/bin/${{ matrix.cc }}", "cpp": "/usr/bin/${{ matrix.cxx }}"}' default
          
          # Set correct compiler version based on compiler type
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            conan profile update settings.compiler.version=11 default
          elif [ "${{ matrix.compiler }}" = "clang" ]; then
            conan profile update settings.compiler.version=14 default
          fi

      - name: Check environment
        run: |
          echo "PATH: ${PATH}" | tr ':' '\n'
          conan --version
          cmake --version
          ${{ matrix.cc }} --version
          ${{ matrix.cxx }} --version

      - name: Build
        uses: ./.github/actions/build
        with:
          generator: Ninja
          configuration: ${{ matrix.configuration }}

      - name: Set artifact name
        id: set-artifact-name
        run: |
          ARTIFACT_NAME="build-output-nix-${{ github.run_id }}-${{ matrix.compiler }}-${{ matrix.configuration }}"
          echo "artifact_name=${ARTIFACT_NAME}" >> "$GITHUB_OUTPUT"
          echo "Using artifact name: ${ARTIFACT_NAME}"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.set-artifact-name.outputs.artifact_name }}
          path: ${{ env.build_dir }}
          retention-days: 1

  tests:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build.outputs.artifact_name }}
          path: .build

      - name: Set executable permissions
        run: |
          chmod +x .build/rippled

      - name: Run tests
        run: |
          .build/rippled --unittest --unittest-jobs $(nproc)