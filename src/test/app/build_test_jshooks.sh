#!/bin/bash -u

# Generate the SetJSHook_wasm.h file from the SetJSHook_test.cpp file.
# 
# Prerequisites:
# - quickjs:
#   $git clone https://github.com/RichardAH/quickjslite.git
#   $cd quickjslite
#   $make
#   copy `qjsc` to the src/test/app of the repo
#
# - clang-format:
#   Ubuntu: $sudo apt-get install clang-format
#   macOS: $brew install r-lib/taps/clang-format@10
# 
# - (macOS Only) GNU sed, grep:
#   $brew install gnu-sed grep
#   add path: PATH="/opt/homebrew/opt/gnu-sed/libexec/gnubin:$PATH"

set -e
# Get the script directory (retrieving the correct path regardless of where it's executed from)
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "${SCRIPT_DIR}"
# Set the project root directory
# PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../../.." && pwd)"
WASMJS_DIR="generated/qjsb"
INPUT_FILE="SetJSHook_test.cpp"
OUTPUT_FILE="SetJSHook_wasm.h"
mkdir -p $WASMJS_DIR
echo '
//This file is generated by build_test_jshooks.sh
#ifndef SETHOOK_JSWASM_INCLUDED
#define SETHOOK_JSWASM_INCLUDED
#include <map>
#include <stdint.h>
#include <string>
#include <vector>
namespace ripple {
namespace test {
std::map<std::string, std::vector<uint8_t>> jswasm = {' > $OUTPUT_FILE
COUNTER="0"
cat "$INPUT_FILE" | tr '\n' '\f' |
        grep -Po 'R"\[test\.hook\](.*?)\[test\.hook\]"' | 
        sed -E 's/R"\[test\.hook\]\(//g' | 
        sed -E 's/\)\[test\.hook\]"[\f \t]*/\/*end*\//g' | 
        while read -r line
        do
            echo "/* ==== WASM: $COUNTER ==== */" >> $OUTPUT_FILE
            echo -n '{ R"[test.hook](' >> $OUTPUT_FILE
            cat <<< "$line" | sed -E 's/.{7}$//g' | tr -d '\n' | tr '\f' '\n' >> $OUTPUT_FILE
            echo ')[test.hook]",' >> $OUTPUT_FILE
            echo "{" >> $OUTPUT_FILE
            WAT=`grep -Eo '\(module' <<< "$line" | wc -l`
            if [ "$WAT" -eq "0" ]
            then
                tr '\f' '\n' <<< "$line" > "$WASMJS_DIR/test-$COUNTER-gen.js"
                ./build-js-carray.sh "$WASMJS_DIR/test-$COUNTER-gen.js" >> $OUTPUT_FILE
            else
                echo "Compilation error ^"
                exit 1
            fi
            if [ "$?" -gt "0" ]
            then
                echo "Compilation error ^"
                exit 1
            fi
            echo '}},' >> $OUTPUT_FILE
            echo >> $OUTPUT_FILE
            COUNTER=`echo $COUNTER + 1 | bc`
        done
echo '};
}
}
#endif' >> $OUTPUT_FILE
clang-format -i $OUTPUT_FILE
